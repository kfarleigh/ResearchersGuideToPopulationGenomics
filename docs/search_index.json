[["index.html", "The Researcher’s Guide to Population Genomic Analysis Preface About the Author Motivation Acknowledgements Citing this book", " The Researcher’s Guide to Population Genomic Analysis Keaka Farleigh 2023-05-09 Preface About the Author Hi! I am a Ph.D. candidate, bioinformatician, data scientist, and National Science Foundation Doctoral Fellow working in the Jezkova lab at Miami University (OH). I use bioinformatic techniques to understand how genomic variation is influenced by environmental factors. I am particularly interested in the genomics of local adaptation, hybridization, and the development of new bioinformatic tools for biological applications. Feel free to visit my website or CV if you’d like to check out my past work. Motivation This book was created to help anyone interested in analyzing population genomic data. I have spent many hours in my Ph.D. trying to develop and understand scripts to analyze population genomic data. I hope that this book makes someone’s life easier and provides a clear and concise explanation of commonly used population genomic analyses. It is a work in progress, so feel free to reach out with any comments or suggestions. Acknowledgements I thank my wife, advisor, and collaborators for their support and help with many of the topics discussed in this book. I also acknowledge and thank the National Science Foundation Graduate Research Fellowship Program (NSF GRF Award #2037786) and Miami University for funding my dissertation and for providing the opportunity to develop this book. Citing this book If you use any of the materials in this book please use the citation below and remember to cite any packages or data sets as well. Citation Farleigh, K. (2023). The researcher’s guide to population genomic analysis. "],["rna-seq-mapping-pipeline.html", "1 RNA-seq mapping pipeline 1.1 Chapter ToDo for KF 1.2 Files required for this pipeline 1.3 Programs used in this pipeline 1.4 Notes on this pipeline 1.5 Quality control with FastQC and Trimmomatic 1.6 Mapping with STAR 1.7 Calling variants 1.8 References", " 1 RNA-seq mapping pipeline 1.0.1 This chapter is still under construction This tutorial contains code to perform quality control, mapping, and variant calling of demultiplexed samples. The dataset used in this tutorial is unpublished, but I will provide the link to the associated publication once the manuscript is published. This pipeline is written for paired-end (PE) sequencing data, but it has been tested with single-end (SE) sequencing data and I will note how commands can be changed to accommodate SE data. 1.1 Chapter ToDo for KF Add workflow visualization 1.2 Files required for this pipeline Demultiplexed RNA-seq data Genomic fasta file 1.3 Programs used in this pipeline FastQC (Andrews, 2010) Trimommatic (Bolger et al., 2014) STAR (Dobin et al., 2013) Picard GATK (McKenna et al., 2010; but see this website for additional papers published about GATK) 1.4 Notes on this pipeline This pipeline has been tested on Miami University’s RedHawk High Performace Computing cluster (HPC) and should work elsewhere, but that cannot be guaranteed. Additionally, if you are working on a cluster, please make sure you have reserved resources/are on a compute node before running this pipeline. Please reach out if you would like help running this using batch jobs or if you have any questions about working in an HPC environment. Finally, the for loops in this pipeline are written to work with fastq, fq.gz, or bam files. In essence, the loops use the file extensions or specific character strings to create a list of files to perform some kind of action on. In most loops, the actions is to echo a command into a batch or sh file so that we can save time and do not have to do it ourselves. These loops can be adjusted easily by changing the sed command, please reach out if you have any questions on how to adjust the loop. Let’s get started and analyze some data! 1.5 Quality control with FastQC and Trimmomatic As with any sequencing data, the first thing that we do is quality control. We employ a two step quality control procedure. First, we use fastqc to analyze reads and manually inspect the output. Second, we use trimmomatic to perform any necessary read clipping, read filtering, or adapter removal. Assuming that you are in your working directory with all of the demultiplexed files # Load fastqc if you need module load fastqc # Run fastqc on everything in the directory fastqc * After fastqc runs, we are left with an html report for each of the files in our directory. Open a file and inspect the output, there is a lot here but we are most concerned with the Per base sequence quality graph. This graph shows us the quality scores across our reads. We expect that most of the quality scores to fall in the green area (above 28), but sometimes we see bases at the beginning or end of the read fall into the yellow (20-28) or red areas (0-20). I recommend trimming these reads to exclude anything outside of the green areas, but the decision is yours when it comes to your data. But how do I trim the reads or remove reads of low-quality? We use trimmomatic to clip reads, remove low-quality reads, and exclude any adapters that are still present. I include example code below for an individual file and code to loop commands into a shell script so that you can be more efficient. ### Commands to trim a single individual/file # Trimmomatic requires java module load java # Make a trimmed directory to keep our working directory clean mkdir ./trimmed # Run the trimmomatic command java -jar /home/farleik/Software/trimmomatic-0.39.jar PE ${i}_1.fq.gz\\ ${i}_2.fq.gz\\ ./trimmed/${i}_1_paired.fq.gz\\ ./trimmed/${i}_1_unpaired.fq.gz\\ ./trimmed/${i}_2_paired.fq.gz ./trimmed/${i}_2_unpaired.fq.gz ILLUMINACLIP:TruSeq3-PE.fa:2:30:10:2:keepBothReads LEADING:3 TRAILING:3 MINLEN:36 ### Loop it into a shell file for efficiency # This command will create a file named trimmomatic.sh in your working directory touch trimmomatic.sh # Trimmomatic requires java so we add the command to load java to the trimmomatic.sh file echo module load java &gt;&gt; trimmomatic.sh # We don’t want to clutter up our working directory so we need to create a directory that holds all of the output echo mkdir ./trimmed &gt;&gt; trimmomatic.sh # The for loop to generate the trimmomatic command for each individual/file for i in `ls -1 *_1.fq.gz | sed &#39;s/\\_1.fq.gz//&#39;`; do echo java -jar /home/farleik/Software/trimmomatic-0.39.jar PE ${i}_1.fq.gz\\ ${i}_2.fq.gz\\ ./trimmed/${i}_1_paired.fq.gz\\ ./trimmed/${i}_1_unpaired.fq.gz\\ ./trimmed/${i}_2_paired.fq.gz ./trimmed/${i}_2_unpaired.fq.gz ILLUMINACLIP:TruSeq3-PE.fa:2:30:10:2:keepBothReads LEADING:3 TRAILING:3 MINLEN:36 &gt;&gt; trimmomatic.sh; done # Trim everything sh trimmomatic.sh Now that everything is trimmed we can move onto mapping with STAR 1.6 Mapping with STAR Mapping the RNA-seq data with STAR is relatively straightforward (only requires a couple commands), but I encourage you to familiarize yourself with the program by checking out the manual. The options I use here are specific for my project and while they may also be relevant to your project it is best to understand the settings you choose. First, we will use our genomic fasta to generate some files used by STAR during the mapping process. We then use a for loop similar to the one in the trimmomatic step to map and generate read counts for each individual. # Load STAR module load star-2.7.5a # Converting GFF to GTF ./gffread Phry_platy.gff -T -o Phry_platy_ann.gtf # Use the genome fasta to generate files used by STAR during mapping STAR --runMode genomeGenerate --genomeDir ./indexes/ --genomeFastaFiles ../../redo_annotation/final_assembly.fa --sjdbGTFfile ./Phry_platy_ann.GTF # This command will create a file named trimmomatic.sh in your working directory touch RNAseq_mapping.sh # Trimmomatic requires java so we add the command to load java to the trimmomatic.sh file echo module load star-2.7.5a &gt;&gt; RNAseq_mapping.sh # This command is for PE data for i in `ls -1 *_1_paired.fq.gz | sed &#39;s/\\_1_paired.fq.gz//’ `; do echo STAR --runThreadN 2 --genomeDir /shared/jezkovt_farleik_shared/Platy_RNAseq/Genome/ --readFilesIn ${i}_1_paired.fq.gz ${i}_2_paired.fq.gz --readFilesCommand zcat --limitOutSJcollapsed 2000000 --outFileNamePrefix ./${i} --outSAMtype BAM SortedByCoordinate --limitBAMsortRAM 29000000000 --quantMode GeneCounts &gt;&gt; RNAseq_mapping.sh; done sh RNAseq_mapping # This command is for SE data, notice that there is only one input file (--readFilesIn) for i in `ls -1 *.fastq | sed &#39;s/\\.fastq//’ `; do echo STAR --runThreadN 2 --genomeDir /shared/jezkovt_farleik_shared/Platy_RNAseq/Anolis_Data/Genome/ --readFilesIn ${i}.fastq --readFilesCommand zcat --limitOutSJcollapsed 2000000 --outFileNamePrefix ./${i} --outSAMtype BAM SortedByCoordinate --limitBAMsortRAM 29000000000 --quantMode GeneCounts &gt;&gt; Anolis_IndMapping.sh; done Mapping is done, well maybe. We can use the files output here to perform analyses such as differential gene expression analysis or weighted gene co-expression analysis, but if we want to call variants in our RNA-seq data I recommend following GATK’s best practices and using STAR’s two pass method. This method increases sensitivity to novel splice junctions and in the absence of annotations it is strongly recommended. We will use the splice junction files generated by STAR (SJ.out.tab files) to re-generate our genome indices. First, we filter out potential false positive splice junctions that have very few reads, non-canonical junctions, and annotated junctions. # I like to move all of the files to a new directory to be safe mkdir SJ_files mv *SJ.out.tab ./SJ_files cd ./SJ_files # Filter our splice junction files cat *.tab | awk &#39;($5 &gt; 0 &amp;&amp; $7 &gt; 2 &amp;&amp; $6==0)&#39; | cut -f1-6 | sort | uniq &gt; SJ_out_filtered.tab cd ../ Now we can re-generate our genome indices # Generate genome indices again STAR --genomeDir ./ --runMode genomeGenerate --genomeFastaFiles /shared/jezkovt_farleik_shared/Platy_RNAseq/Genome/GCA_020142125.1_MUOH_PhPlat_1.1_genomic.fna --sjdbGTFfile /shared/jezkovt_farleik_shared/Platy_RNAseq/Genome/*.gtf --sjdbFileChrStartEnd ./SJ_files/SJ_out_filtered.tab --runThreadN 2 Finally, we will perform the second pass mapping. # Make a new directory to be tidy and not modify any of the files generated during step 1 mkdir GenomeSecondPass mv * ./GenomeSecondPass cd ./GenomeSecondPass # Create the new file for 2nd pass mapping touch Platy_IndMapping_2ndPass.sh # Echo the STAR module into it echo module load star-2.7.5a &gt;&gt; Platy_IndMapping_2ndPass.sh # Map the reads again to the second pass genome file for i in `ls -1 *_1_paired.fq.gz | sed &#39;s/\\_1_paired.fq.gz//&#39; `; do echo STAR --runThreadN 2 --genomeDir /shared/jezkovt_farleik_shared/Platy_RNAseq/SecondPass/GenomeSecondPass/ --readFilesIn ${i}_1_paired.fq.gz ${i}_2_paired.fq.gz --readFilesCommand zcat --limitOutSJcollapsed 2000000 --outFileNamePrefix ./${i}_2ndPass --outSAMtype BAM SortedByCoordinate --limitBAMsortRAM 29000000000 --quantMode GeneCounts &gt;&gt; Platy_IndMapping_2ndPass.sh; done 2nd pass mapping is done! We can move onto variant calling with the GATK suite of tools. 1.7 Calling variants Calling variants is a bit more complicated and time consuming then mapping, but it is definitely doable especially since we will use loops to do most of the work. 1.7.1 Variant calling steps Add read group tags Duplicate filtering Dictionary creation Cigar splitting Preliminary site calling Base recalibration Variant calling We use picard to add read group tags to our reads. Note, that picard will need to be downloaded from the hyperlink listed above. mkdir Add_Group touch Platy_AddGroups.sh echo module load java-20 &gt; Platy_AddGroups.sh for i in `ls -1 *2ndPassAligned.*.bam | sed &#39;s/\\_2ndPassAligned.sortedByCoord.out.bam//&#39; `; do echo java -jar /home/farleik/Software/picard.jar AddOrReplaceReadGroups I= ${i}_2ndPassAligned.sortedByCoord.out.bam O= ./Add_Group/${i}_Add_Group.bam RGID=4 RGLB=lib1 RGPL=illumina RGPU=identifier RGSM=sample_name &gt;&gt; Platy_AddGroups.sh; done sh Platy_AddGroups.sh cd ./Add_Group We remove any duplicate reads with picard. mkdir Dup_filtered echo module load java-20 &gt; Platy_DupFiltering.sh for i in `ls -1 *Add_Group*.bam | sed &#39;s/\\_Add_Group.bam//&#39; `; do echo java -jar /home/farleik/Software/picard.jar MarkDuplicates I= ${i}_Add_Group.bam O= ./Dup_filtered/${i}_DupFiltered.bam CREATE_INDEX=true VALIDATION_STRINGENCY=SILENT M= ./Dup_filtered/${i}_DupFiltered_stats.txt &gt;&gt; Platy_DupFiltering.sh; done cd ./Dup_filtered Create a dictionary from our reference sequence with picard. java -jar /home/farleik/Software/picard.jar CreateSequenceDictionary -R /shared/jezkovt_farleik_shared/Platy_RNAseq/Genome/GCA_020142125.1_MUOH_PhPlat_1.1_genomic.fna -O Platy_ref.dict Now we will use GATK to split Cigar N reads and reassign quality scores mkdir Cigar_Split echo module load gatk-4.1.2.0 &gt; Platy_CigarSplit.sh for i in `ls -1 *Dup*.bam | sed &#39;s/\\_DupFiltered.bam//&#39; `; do echo gatk SplitNCigarReads -R Platy.fna -I ${i}_DupFiltered.bam -O ./Cigar_Split/${i}_CigarSplit.bam &gt;&gt; Platy_CigarSplit.sh; done sh Platy_CigarSplit.sh Preliminary variant calling. We do this so that we can recalibrate our bases. mkdir ./Prelim_VCFcalling echo module load gatk-4.1.2.0 &gt; Platy_PrelimVCFcalling.sh for i in `ls -1 *Cigar*.bam | sed &#39;s/\\_CigarSplit.bam//&#39; `; do echo gatk HaplotypeCaller -R ../Platy.fna -I ${i}_CigarSplit.bam -O ./Prelim_VCFcalling/${i}_Prelim.g.vcf.g.gz -ERC GVCF &gt;&gt; Platy_PrelimVCFcalling.sh; done sh Platy_PrelimVCFcalling.sh cd ./Prelim_VCFcalling # Combine the gVCFs into one multisample vcf ls *vcf.g.gz &gt; vcfs.list gatk CombineGVCFs -R /shared/jezkovt_farleik_shared/Platy_RNAseq/SecondPass/Add_Group/Dup_filtered/Platy.fna --variant vcfs.list -O Prelim_Platy.g.vcf.gz 1.8 References Andrews, S. (2010). FastQC: A Quality Control Tool for High Throughput Sequence Data [Online]. Available online at: http://www.bioinformatics.babraham.ac.uk/projects/fastqc/ Bolger, A. M., Lohse, M., &amp; Usadel, B. (2014). Trimmomatic: a flexible trimmer for Illumina sequence data. Bioinformatics, 30(15), 2114-2120. Dobin, A., Davis, C. A., Schlesinger, F., Drenkow, J., Zaleski, C., Jha, S., … &amp; Gingeras, T. R. (2013). STAR: ultrafast universal RNA-seq aligner. Bioinformatics, 29(1), 15-21. McKenna A, Hanna M, Banks E, Sivachenko A, Cibulskis K, Kernytsky A, Garimella K, Altshuler D, Gabriel S, Daly M, DePristo MA. (2010). The Genome Analysis Toolkit: a MapReduce framework for analyzing next-generation DNA sequencing data. Genome Res, 20:1297-303. DOI: 10.1101/gr.107524.110. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
