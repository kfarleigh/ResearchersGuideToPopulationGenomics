[["index.html", "The Researcher’s Guide to Population Genomic Analysis Preface About the Author Motivation Acknowledgements Citing this book", " The Researcher’s Guide to Population Genomic Analysis Keaka Farleigh 2023-05-08 Preface About the Author Hi! I am a Ph.D. candidate, bioinformatician, data scientist, and National Science Foundation Doctoral Fellow working in the Jezkova lab at Miami University (OH). I use bioinformatic techniques to understand how genomic variation is influenced by environmental factors. I am particularly interested in the genomics of local adaptation, hybridization, and the development of new bioinformatic tools for biological applications. Feel free to visit my website or CV if you’d like to check out my past work. Motivation This book was created to help anyone interested in analyzing population genomic data. I have spent many hours in my Ph.D. trying to develop and understand scripts to analyze population genomic data. I hope that this book makes someone’s life easier and provides a clear and concise explanation of commonly used population genomic analyses. It is a work in progress, so feel free to reach out with any comments or suggestions. Acknowledgements I thank my wife, advisor, and collaborators for their support and help with many of the topics discussed in this book. I also acknowledge and thank the National Science Foundation Graduate Research Fellowship Program (NSF GRF Award #2037786) and Miami University for funding my dissertation and for providing the opportunity to develop this book. Citing this book If you use any of the materials in this book please use the citation below and remember to cite any packages or data sets as well. Citation Farleigh, K. (2023). The researcher’s guide to population genomic analysis. "],["rna-seq-mapping-pipeline.html", "1 RNA-seq mapping pipeline 1.1 Chapter ToDo for KF 1.2 Programs used in this pipeline 1.3 Quality Control with FastQC and Trimmomatic 1.4 Mapping with STAR 1.5 Calling Variants 1.6 References", " 1 RNA-seq mapping pipeline 1.0.1 This chapter is still under construction This tutorial contains code to perform quality control, mapping, and variant calling of demultiplexed samples. The dataset used in this tutorial is unpublished, but I will provide the link to the associated publication once the manuscript is published. This pipeline is written for paired-end (PE) sequencing data, but it has been tested with single-end (SE) sequencing data and I will note how commands can be changed to accommodate SE data. 1.1 Chapter ToDo for KF Add workflow visualization Edit writing, add more details Add notes about loading programs and making sure you are on a compute node 1.2 Programs used in this pipeline FastQC (Andrews, 2010) Trimommatic (Bolger et al., 2014) STAR (Dobin et al., 2013) Picard GATK (McKenna et al., 2010; but see this website for additional papers published about GATK) Let’s get started and analyze some data! 1.3 Quality Control with FastQC and Trimmomatic As with any sequencing data, the first thing that we do is quality control. We employ a two step quality control procedure. First, we use fastqc to analyze reads and manually inspect the output. Second, we use trimmomatic to perform any necessary read clipping, read filtering, or adapter removal. Assuming that you are in your working directory with all of the demultiplexed files # Load fastqc if you need module load fastqc # Run fastqc on everything in the directory fastqc * After fastqc runs, we are left with an html report for each of the files in our directory. Open a file and inspect the output, there is a lot here but we are most concerned with the Per base sequence quality graph. This graph shows us the quality scores across our reads. We expect that most of the quality scores to fall in the green area (above 28), but sometimes we see bases at the beginning or end of the read fall into the yellow (20-28) or red areas (0-20). I recommend trimming these reads to exclude anything outside of the green areas, but the decision is yours when it comes to your data. But how do I trim the reads or remove reads of low-quality? We use trimmomatic to clip reads, remove low-quality reads, and exclude any adapters that are still present. I include example code below for an individual file and code to loop commands into a shell script so that you can be more efficient. ### Commands to trim a single individual/file # Trimmomatic requires java module load java # Make a trimmed directory to keep our working directory clean mkdir ./trimmed # Run the trimmomatic command java -jar /home/farleik/Software/trimmomatic-0.39.jar PE ${i}_1.fq.gz\\ ${i}_2.fq.gz\\ ./trimmed/${i}_1_paired.fq.gz\\ ./trimmed/${i}_1_unpaired.fq.gz\\ ./trimmed/${i}_2_paired.fq.gz ./trimmed/${i}_2_unpaired.fq.gz ILLUMINACLIP:TruSeq3-PE.fa:2:30:10:2:keepBothReads LEADING:3 TRAILING:3 MINLEN:36 ### Loop it into a shell file for efficiency # This command will create a file named trimmomatic.sh in your working directory touch trimmomatic.sh # Trimmomatic requires java so we add the command to load java to the trimmomatic.sh file echo module load java &gt;&gt; trimmomatic.sh # We don’t want to clutter up our working directory so we need to create a directory that holds all of the output echo mkdir ./trimmed &gt;&gt; trimmomatic.sh # The for loop to generate the trimmomatic command for each individual/file for i in `ls -1 *_1.fq.gz | sed &#39;s/\\_1.fq.gz//&#39;`; do echo java -jar /home/farleik/Software/trimmomatic-0.39.jar PE ${i}_1.fq.gz\\ ${i}_2.fq.gz\\ ./trimmed/${i}_1_paired.fq.gz\\ ./trimmed/${i}_1_unpaired.fq.gz\\ ./trimmed/${i}_2_paired.fq.gz ./trimmed/${i}_2_unpaired.fq.gz ILLUMINACLIP:TruSeq3-PE.fa:2:30:10:2:keepBothReads LEADING:3 TRAILING:3 MINLEN:36 &gt;&gt; trimmomatic.sh; done # Trim everything sh trimmomatic.sh Now that everything is trimmed we can move onto mapping with STAR 1.4 Mapping with STAR Mapping the RNA-seq data with STAR is relatively straightforward (only requires a couple commands), but I encourage you to familiarize yourself with the program by checking out the manual. The options I use here are specific for my project and while they may also be relevant to your project it is best to understand the settings you choose. I use a for loop to make the process semi-automated like in trimmomatic. # Need to add a genome generete command # This command is for SE data, not PE and will generate output for each individual. for i in `ls -1 *.fastq | sed &#39;s/\\.fastq//’ `; do echo STAR --runThreadN 2 --genomeDir /shared/jezkovt_farleik_shared/Platy_RNAseq/Anolis_Data/Genome/ --readFilesIn ${i}.fastq --readFilesCommand zcat --limitOutSJcollapsed 2000000 --outFileNamePrefix ./${i} --outSAMtype BAM SortedByCoordinate --limitBAMsortRAM 29000000000 --quantMode GeneCounts &gt;&gt; Anolis_IndMapping.txt; done 1.5 Calling Variants 1.6 References Andrews, S. (2010). FastQC: A Quality Control Tool for High Throughput Sequence Data [Online]. Available online at: http://www.bioinformatics.babraham.ac.uk/projects/fastqc/ Bolger, A. M., Lohse, M., &amp; Usadel, B. (2014). Trimmomatic: a flexible trimmer for Illumina sequence data. Bioinformatics, 30(15), 2114-2120. Dobin, A., Davis, C. A., Schlesinger, F., Drenkow, J., Zaleski, C., Jha, S., … &amp; Gingeras, T. R. (2013). STAR: ultrafast universal RNA-seq aligner. Bioinformatics, 29(1), 15-21. McKenna A, Hanna M, Banks E, Sivachenko A, Cibulskis K, Kernytsky A, Garimella K, Altshuler D, Gabriel S, Daly M, DePristo MA. (2010). The Genome Analysis Toolkit: a MapReduce framework for analyzing next-generation DNA sequencing data. Genome Res, 20:1297-303. DOI: 10.1101/gr.107524.110. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
